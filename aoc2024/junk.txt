   let getPathsForSeqPt2 (dpadSeq: string) (pad: pad) =
        let startPos =
            match pad with
            | NPAD -> npadSp
            | DPAD -> dpadSp

        let q = Queue()
        q.Enqueue((startPos, "", [], dpadSeq))

        let mutable paths = List()
        let mutable shortestPathFound = None

        while (q.Count > 0) do
            let cp, cpath, parts, dpadSeq = q.Dequeue()

            if (dpadSeq.Length = 0) then
                if (shortestPathFound.IsNone || cpath.Length < shortestPathFound.Value) then
                    shortestPathFound <- Some(cpath.Length)

                paths.Add((cpath, parts))
            else if (shortestPathFound.IsNone || cpath.Length <= shortestPathFound.Value) then
                let target = dpadSeq[0] |> string

                let targetPos =
                    match pad with
                    | NPAD -> npadButtonPositions[target]
                    | DPAD -> dpadButtonPositions[target]

                let n = 10

                let memoized =
                    if memo.Count > 0 then
                        Seq.init n (fun x -> x + 1)
                        |> Seq.where (fun len -> len <= dpadSeq.Length)
                        |> Seq.map (fun len ->
                            let target = dpadSeq[0 .. len - 1]
                            (len, target, (tryGetValue (cp, target) memo)))
                        |> Seq.takeWhile (fun (_, __, result) -> result.IsSome)
                        |> Seq.tryLast
                    else
                        None

                if (memoized.IsSome) then
                    let len, target, result = memoized.Value
                    let newPath = cpath + result.Value + "A"

                    let targetPos =
                        match pad with
                        | NPAD -> npadButtonPositions[target[target.Length - 1].ToString()]
                        | DPAD -> dpadButtonPositions[target[target.Length - 1].ToString()]

                    q.Clear()
                    q.Enqueue((targetPos, newPath, parts, dpadSeq[len..]))
                else
                    let paths =
                        match pad with
                        | DPAD -> shortestPathsToPressButton target cp (dpad[0].Length) dpad.Length dpadGetV
                        | NPAD -> shortestPathsToPressButton target cp (npad[0].Length) npad.Length npadGetV

                    paths
                    |> Seq.iter (fun p ->
                        let newPath = cpath + p + "A"
                        q.Enqueue((targetPos, newPath, parts @ [ (cp, p, target) ], dpadSeq[1..])))

        paths
